(('RULE', ('NAME', ('IDENT', 'visible_ascii')), ('PATTERN', ('RANGE', ('TERM', '!'), ('TERM', '~'))), ('CONV', '')), ('RULE', ('NAME', ('IDENT', 'whitespace')), ('PATTERN', ('ALT', ('TERM', ' '), ('TERM', '\n'), ('TERM', '\t'), ('TERM', '\r'), ('TERM', '\x0c'), ('TERM', '\x08'))), ('CONV', '')), ('RULE', ('NAME', ('IDENT', 'character')), ('PATTERN', ('ALT', ('IDENT', 'visible_ascii'), ('IDENT', 'whitespace'))), ('CONV', '')), ('RULE', ('NAME', ('IDENT', 'letter')), ('PATTERN', ('ALT', ('RANGE', ('TERM', 'A'), ('TERM', 'Z')), ('RANGE', ('TERM', 'a'), ('TERM', 'z')))), ('CONV', '')), ('RULE', ('NAME', ('IDENT', 'digit')), ('PATTERN', ('RANGE', ('TERM', '0'), ('TERM', '9'))), ('CONV', '')), ('RULE', ('NAME', ('IDENT', 'S')), ('PATTERN', ('ANY', ('IDENT', 'whitespace'))), ('CONV', 'discard ')), ('RULE', ('NAME', ('IDENT', 'quantifier')), ('PATTERN', ('ALT', ('TERM', '+'), ('TERM', '*'), ('TERM', '?'))), ('CONV', '')), ('RULE', ('NAME', ('IDENT', 'identifier')), ('PATTERN', ('ALT', ('IDENT', 'letter'), ('SEQ', ('IDENT', 'letter'), ('ANY', ('ALT', ('IDENT', 'letter'), ('IDENT', 'digit'), ('TERM', '_'), ('TERM', ' '))), ('ALT', ('IDENT', 'letter'), ('IDENT', 'digit'), ('TERM', '_'))))), ('CONV', 'lambda xs: (("IDENT", *concat(xs)),) ')), ('RULE', ('NAME', ('IDENT', 'single_terminal')), ('PATTERN', ('SEQ', ('TERM', '"'), ('MANY', ('ALT', ('DIFF', ('IDENT', 'character'), ('TERM', '"')), ('TERM', '\\', '"'))), ('TERM', '"'))), ('CONV', 'lambda xs: (("TERM", *convert_escaped(concat(xs[1:-1])[0])),) ')), ('RULE', ('NAME', ('IDENT', 'range_terminal')), ('PATTERN', ('SEQ', ('IDENT', 'single_terminal'), ('IDENT', 'S'), ('TERM', '.', '.', '.'), ('IDENT', 'S'), ('IDENT', 'single_terminal'))), ('CONV', 'lambda xs: (("RANGE", xs[0], xs[-1]),) ')), ('RULE', ('NAME', ('IDENT', 'cut')), ('PATTERN', ('TERM', '!')), ('CONV', 'lambda _: (("CUT",),) ')), ('RULE', ('NAME', ('IDENT', 'terminal')), ('PATTERN', ('ALT', ('IDENT', 'single_terminal'), ('IDENT', 'range_terminal'), ('IDENT', 'cut'))), ('CONV', '')), ('RULE', ('NAME', ('IDENT', 'paren_term')), ('PATTERN', ('SEQ', ('TERM', '('), ('IDENT', 'S'), ('IDENT', 'alternation'), ('IDENT', 'S'), ('TERM', ')'))), ('CONV', 'lambda xs: xs[1:-1] ')), ('RULE', ('NAME', ('IDENT', 'term')), ('PATTERN', ('ALT', ('IDENT', 'paren_term'), ('IDENT', 'terminal'), ('IDENT', 'identifier'))), ('CONV', '')), ('RULE', ('NAME', ('IDENT', 'quantified_expression')), ('PATTERN', ('SEQ', ('IDENT', 'term'), ('IDENT', 'S'), ('IDENT', 'quantifier'))), ('CONV', 'lambda xs: (({"*": "ANY", "+": "MANY", "?": "OPT"}[xs[-1]], xs[0]),) ')), ('RULE', ('NAME', ('IDENT', 'difference_expression')), ('PATTERN', ('SEQ', ('IDENT', 'term'), ('IDENT', 'S'), ('TERM', '-'), ('IDENT', 'S'), ('IDENT', 'term'))), ('CONV', 'lambda xs: (("DIFF", xs[0], xs[2]),) ')), ('RULE', ('NAME', ('IDENT', 'factor')), ('PATTERN', ('ALT', ('IDENT', 'quantified_expression'), ('IDENT', 'difference_expression'), ('IDENT', 'term'))), ('CONV', '')), ('RULE', ('NAME', ('IDENT', 'concatenation')), ('PATTERN', ('SEQ', ('IDENT', 'factor'), ('ANY', ('SEQ', ('IDENT', 'S'), ('TERM', ','), ('IDENT', 'S'), ('IDENT', 'factor'))))), ('CONV', 'lambda xs: (("SEQ", *[x for i, x in enumerate(xs) if i % 2 == 0]),) if len(xs) > 1 else xs ')), ('RULE', ('NAME', ('IDENT', 'alternation')), ('PATTERN', ('SEQ', ('IDENT', 'concatenation'), ('ANY', ('SEQ', ('IDENT', 'S'), ('TERM', '|'), ('IDENT', 'S'), ('IDENT', 'concatenation'))))), ('CONV', 'lambda xs: (("ALT", *[x for i, x in enumerate(xs) if i % 2 == 0]),) if len(xs) > 1 else xs ')), ('RULE', ('NAME', ('IDENT', 'name')), ('PATTERN', ('IDENT', 'identifier')), ('CONV', 'lambda xs: (("NAME", xs[0]),) ')), ('RULE', ('NAME', ('IDENT', 'pattern')), ('PATTERN', ('IDENT', 'alternation')), ('CONV', 'lambda xs: (("PATTERN", xs[0]),) ')), ('RULE', ('NAME', ('IDENT', 'conversion')), ('PATTERN', ('OPT', ('SEQ', ('TERM', '-', '>'), ('IDENT', 'S'), ('ANY', ('DIFF', ('IDENT', 'character'), ('TERM', ';')))))), ('CONV', 'lambda xs: (("CONV", *(concat(xs[2:]) if xs else (\'\',))),) ')), ('RULE', ('NAME', ('IDENT', 'rule')), ('PATTERN', ('SEQ', ('IDENT', 'name'), ('IDENT', 'S'), ('TERM', '='), ('IDENT', 'S'), ('IDENT', 'pattern'), ('IDENT', 'S'), ('IDENT', 'conversion'), ('TERM', ';'), ('CUT',))), ('CONV', 'lambda xs: (("RULE", xs[0], xs[2], xs[3]),) ')), ('RULE', ('NAME', ('IDENT', 'grammar')), ('PATTERN', ('ANY', ('SEQ', ('IDENT', 'S'), ('IDENT', 'rule'), ('IDENT', 'S')))), ('CONV', '')))
